Spring java docs links
Link : https://docs.spring.io/spring-framework/docs/5.3.26/javadoc-api/
Spring Data JPA Links (Bookmark them!)
1. API Docs : https://docs.spring.io/spring-data/jpa/docs/2.7.14/api/
2. Ref docs : https://docs.spring.io/spring-data/jpa/docs/2.7.14/reference/html/


Today's topics : 
Revise
1. What were the problems faced in the requirement below ?
Get all departments ? 
(Department 1<---->* Employee)
REST API end point : http://host:port/departments
1.1 LazyInitExc --during ser/marshalling (Java-->JSON)  ---Jackson --during conversion
Reason : one---> many : fetch : LAZY , Jackson CAN NOT ser. proxy (=> emps) --throws the exc.

1.2 POJO layer soln : 
one---> many : fetch : EAGER
stack overflow --recursion 
Reason : bi dir asso. (=> Jackson --> dept --> emps --> dept)

1.3 Entity : Jackson anno :
@JsonIgonre => to tell Jackson --to ignore the prop/field during ser n de-ser.
problem solved --
Resp : dept[] --containing ONLY dept details !

Clean soln / recommendation : 
DO NOT expose entities fro data exchange between REST clnt n REST server
Instead use DTO(Data transfer obj) pattern

1.4 Entity --> DTO (This conversion is required during ser.)
Create DTO instance , read data from entity(getter) --> set the data in DTO (setter)

DTO --> Entity (This conversion is required during de-ser.)
Create entity instance , read data from dto(getter) --> set the data in entity (setter)

1.5 Instead of doing it ourselves --there are ready made 3rd party libs -
meant for src obj --> dest obj conversion.

eg : ModelMapper.

1.6 How ?
Steps 
1. add dependency in pom.xml 
2. Requirement : Service layer needs ModelMapper , as a dependency for conversion
IoC : D.I 
@AutoWired 
private ModelMapper mapper;

Pre requisite : ModelMapper : must be configured as a spring bean
Which are the different ways of config a spring bean
1. In pure xml :
bean-config.xml
<bean id , class..../>
OR
2. Spring boot : no xml approach
bean-config.xml --> replaced by Java config class (@Configuration)
<bean id , class..../> : @Component | @Service | @Controller...
It's possible to use these stereotype anno --while developing your own spring beans
OR
For  the 3rd party classes (eg : ModelMapper , PasswordEncoder...) to be cnofigured as spring bean : 
 @Bean : method level annotation , that can be added under spring config class
@Bean 
public ModelMapper modelMapper()
{
 //partial IoC appraoch --since we are creating java obj n returning it to SC
  ModelMapper mapper=new ModelMapper();
 ......config of model mapper (matching policy : STRICT => iff matching names n data types , do not xfer nulls
  return mapper;
}

3. In Spring boot app :
you specify : base pkg : com.app
Creates a main class under this base-pkg
auto annotated with : @SpringBootApplication=....@SpringBootConfiguration => config class

2. Understand the need of DTO pattern in REST APIs n it's implementation

---------------------------
Eclipse Project : day16_REST_advanced
Edit password
drop database ems2
Run test cases : dept dao test n emp dao test

New Topics 
1. More practice of Spring Data JPA (Derived finder methods , Custom Query methods)
Refer : Employee , Department n Address Dao

2. More practice of E-R with DTO pattern
2.1 Get all emps whose adhaar card is created before specific date
RestController---->Service --> Dao
i/p : date
o/p : emp details (no dept or adr details ONLY core emp details --fn,ln,em ,pwd...)

2.2 Assign Address to employee
i/p : emp id n address details
o/p : Api Response DTO containing the mesg

Which RestController : AddressControll
Which method in the rest controller : POST
emp id :path var
adr dtls : req body
service logic
dao logic 


2.3 Add new employee with dept id (Lab objective)
i/p : dept id n core emp details
o/p : core emp details with id

2.4 Get Department n associated emp details 
i/p : dept id.
Rest controller : Dept controller , method: GET , dept id : path var
service
dao 

2.5 Employee sign-in
i/p : email n password
o/p : core emp details

2.6 Lab objective
Update address details
i/p : emp id n new address details
o/p ApiResp dto containing the message

2.7 Lab objective
Delete address details
i/p : emp id




3. Server side validations

4. Global Exception Handling
5. ResponseEntity introduction
6. Image Handling
7. Pagination




Problems : 


2. Run from swagger :
2.1 Get all departments (with def fetch type of one to many :lazy)
Problem :
org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: failed to lazily initialize a collection of role: com.app.entities.Department.employees, could not initialize proxy - no Session;
Solution : one --> many : with fetch=FetchType.EAGER

2.2 Get all departments , with EAGER FETCH

Problem : stack overflow !!!!! (recursion : bi dir asso between Dept 1<---->* Emp)
Solution :


2.3 
Tell Jackson to ignore this property



2.4 (Try this later !)
Get All employees.

Observation : You get the complete object graph 
What if you don't want to send department details along with employee ?

Or don't want to send AdhaarCard details always ?


2.5 (Try this later !)
While fetching emp details , null properties (eg : image) will also be sent

How to exclude null or absent values ?
You can add at the POJO class level ,
@JsonInclude(Include.NON_EMPTY)


2.6 . Now in your project requirement , if you want to send along with employee , the project details or some time dept details , how will you do it ?
It starts getting so complex !

So here comes simple , easy n  BEST solution

IMPORTANT Project Tip : 
 Typically , do not use entities as request or response payloads.
i.e DO NOT expose your entities directly to the REST client

eg : Instead of returning JSON representation of Employee , use DTO(Data transfer Object) pattern.
Meaning : Use Entities only for persistence purpose.
Use DTOs as request n resp data between REST client n Server.
 
eg DepartmentRespDTO
Decide n control what is it that you want to send as the response to REST client n add only those properties in the Response DTO.

In the request payload decide , what is it that you need from REST client n only that in 
Request DTO

3. Project Tip
In order to automatically  convert Entity <-----> DTO , there are multiple 3rd party libraries.
eg : MapStruct , ModelMapper ...
Using ModelMapper here. 
Refer : "day15_help\Regarding ModelMapper.txt"

3.1 Look at : 
com.app.dto.DepartmentRespDTO

3.2 Modify Service Layer to return List of DTOs
Hint : Use ModelMapper's map method (entity--> DTO)
Use Stream API : map n collect


3.3 Look at : 
com.app.dto.EmployeeRespDTO


4. What will be easier to parse from React front end , a string or JSON ? 
Project tip :
Better Practice : Instead of sending a plain string message to the REST clnt , wrap it in the java object (eg : ApiResponse) n send it to front end

5.1 ApiResponse : DTO pattern (Data transfer object  : to be used as payloads between clnt n server)
Test it .
Add it in delete emp details end point n test it.


6. NOTE : SC (using Jackson=Spring boot's default vendor for marshalling n un marshalling support)
It uses :
getters : During serialization(=marshalling , java---> json)
setters : During de-serialization (=un marshalling , json --> java)
To customize ser n de-ser props
@JsonProperty : Jackson annotation
eg : @JsonProperty(value="mesg")
private String message;

Default  access : read(getter) n write(setter)
If you want to ONLY de serialize a property(eg : password) but don't want to send it during ser.
How to control the property/field access during ser/de-serial
(NOTE : Jackson uses getters during ser n setters during de-ser)
@JsonProperty(access = Access.WRITE_ONLY) : property/field will be ignored during serialization (used only during de-ser.)
@JsonProperty(access = Access.READ_ONLY) :  property/field will be ignored during de serialization (used only during ser.)


7.Replace actual Resource(eg : Employee / Customer / User )  by ResponseEntity

Standard design practice for back end : DO NOT directly send response body content , instead wrap it in ResponseEntity object, which represents ENTIRE HTTP response(sts code,header/s, body)

7.1 Introduction to ResponseEntity
o.s.http.ResponseEntity<T>  : generic class
T : type of the response body

7.2 o.s.http.ResponseEntity<T>
Ctor : ResponseEntity(T body, HttpStatus status);
HttpStatus : enum containing Resp status codes

OR Methods
ResponseEntity.status(HttpStatus status).body(T body)


8. Objective : Employee signin endpoint 
URL : http://host:port/employees/signin
Method : POST (for adding email n pwd : in request body as additional security.)

Rest Controller : method annotation : @PostMapping

Request Body : DTO (eg : AuthRequestDTO)
Resp : ResponseEntity
Success : SC 200 + EmployeeRespDTO
Failure : SC 404 + ApiResp : err mesg +timestamp



In case of failure : Client SHOULD NOT see the error stack trace 
INSTEAD
REST server should ret Resp packet with : SC 404 n resp body containing : DTO 
with time stamp n err mesg (Hint : Use ApiResponse DTO)

9. What will happen ?
In Emp sign in
in the JSON payload : send empty payload
Observe n conclude 

Any problem n any solution ?

10. Enter :  REST Server side Validations
(Refer to readme : templates.txt & "regarding spring boot exc handling n validations.txt") 


11. Image Handling
"spring boot image handling.txt"




------------------
Solve 
1. Emp signin
URL : http://host:port/employees/signin Method: POST
Payload : email n password , encapsulate it in a LoginRequestDto dto
I
eg : Optional<Emp> findByEmailAndPassword(String em,String pass);
Ret type Optional can be replaced by Emp (But not recommended  in modern programming : since it involves null checking)

2. Find all emps joined after a specific date and from specific department
URL : http://host:port/employees/date/2020-1-1/dept/rnd , method =GET
eg : List<Emp> findByJoinDateAfterAndDepartment(LocalDate dt,String dept)

3.Find Emps , drawing salary between a range
Supply range as req params

4. Find all emps having lastname containing some keyword

3.3 Custom Query Methods
If you can't solve the requirement using inherited methods or finder methods , you can use custom query methods
How  ?
Can inject JPQL using @Query annotations n can pass named IN param using @Param .
Simpler replacement of named IN param , will be positional IN params.

Solve : 
1.Get emp complete names drawing salary between the specified range

2. Apply salry increment(UPDATE) to those emps from specific department , joined before a particular date.

More Examples
One Can inject JPQL using @Query annotations
@Query("select p from Product p where p.productCategory.name=?1")
List<Product> fetchProductsByCategoryName(String name);
OR
@Query("select p from Product p where p.productCategory.name=:nm")
List<Product> fetchProductsByCategoryName(@Param(name="nm") String name);

If you want to use  sql instead of a JPQL (as a last resort in the project phase! : not recommended )

@Query(value = "select * from tutorials t WHERE t.published=true", nativeQuery = true)
List<Tutorial> findByPublishedNative();








1.5 Spring Boot Internals
Refer : "day15_help\Spring Boot Internals.txt"


https://www.baeldung.com/java-modelmapper